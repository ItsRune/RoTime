[{"title":"Timezones","type":0,"sectionRef":"#","url":"/RoTime/docs/Timezones","content":"","keywords":""},{"title":"Adding​","type":1,"pageTitle":"Timezones","url":"/RoTime/docs/Timezones#adding","content":"If you'd like to add your own custom timezone to the module, there's an easy method setup for you to do so! Simply name the timezone, and then add the offset from UTC. For example, if you wanted to add a timezone for the United Kingdom, you would do the following: local RoTime = require(script.Parent).new() RoTime:addTimezone(&quot;United Kingdom&quot;, 0)  "},{"title":"Removing​","type":1,"pageTitle":"Timezones","url":"/RoTime/docs/Timezones#removing","content":"If you'd like to remove a timezone, you can do so by using the removeTimezone method. For example, if you wanted to remove the timezone for the United Kingdom, you would do the following: local RoTime = require(script.Parent).new() RoTime:removeTimezone(&quot;United Kingdom&quot;)  "},{"title":"Defaults​","type":1,"pageTitle":"Timezones","url":"/RoTime/docs/Timezones#defaults","content":"The module comes with a few default timezones, which are listed below: GMTAmerica/PhilidolphiaAmerica/CDTAmerica/New_YorkAmerica/PDTAmerica/Los_AngelesAmerica/EDTEurope/CETEurope/LondonEurope/BerlinEurope/NetherlandsEurope/ParisAustralia/PerthAustralia/SydneyAustralia/DarwinAustralia/VictoriaAustralia/TasmaniaAustralia/QueenslandAsia/IndiaAsia/ZhongshanAsia/SingaporeAsia/ShanghaiAsia/JapanAfrica/WesternAfrica/CentralAfrica/Eastern "},{"title":"Why use RoTime?","type":0,"sectionRef":"#","url":"/RoTime/docs/reasonForUse","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"Why use RoTime?","url":"/RoTime/docs/reasonForUse#features","content":"Easy to use - RoTime is designed to be as easy to use as possible.Customizable - RoTime is designed to be as customizable as possible. You can change the time format, timezone, and more.Chainable - RoTime is designed to be as chainable as possible. You can chain methods to make your code look cleaner. "},{"title":"Examples​","type":1,"pageTitle":"Why use RoTime?","url":"/RoTime/docs/reasonForUse#examples","content":"local RoTime = require(game.ReplicatedStorage.RoTime).new() print(RoTime:getTime()) -- 12:00:00 AM print(RoTime:getDate()) -- 1/1/1970 print(RoTime:getTimezone()) -- UTC print(RoTime:format(&quot;#h Hours #m Minutes #s Seconds&quot;)) -- 0 Hours 0 Minutes 0 Seconds print(RoTime:timezone(&quot;America/New_York&quot;)) -- Changes the timezone to America/New_York  "},{"title":"Constructor","type":0,"sectionRef":"#","url":"/RoTime/api/Constructor","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Constructor","url":"/RoTime/api/Constructor#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Constructor","url":"/RoTime/api/Constructor#new","content":"&lt;/&gt; Constructor.new() → RoTime Main constructor for RoTime. "},{"title":"Installation","type":0,"sectionRef":"#","url":"/RoTime/docs/intro","content":"","keywords":""},{"title":"Roblox Module​","type":1,"pageTitle":"Installation","url":"/RoTime/docs/intro#roblox-module","content":"Get the Roblox moduleInsert the module into your game "},{"title":"Formatting Patterns","type":0,"sectionRef":"#","url":"/RoTime/docs/Patterns","content":"","keywords":""},{"title":"What are formatting patterns?​","type":1,"pageTitle":"Formatting Patterns","url":"/RoTime/docs/Patterns#what-are-formatting-patterns","content":"Formatting patterns are a way to format time. For example, if you wanted to format time to look like this: 12:00:00 AM, you would use the formatting pattern #h:#m:#s #a. Formatting patterns are used in the RoTime:format() method. Each pattern must begin with a &quot;#&quot; and end with a letter. "},{"title":"List of formatting patterns​","type":1,"pageTitle":"Formatting Patterns","url":"/RoTime/docs/Patterns#list-of-formatting-patterns","content":"Pattern\tDescription\tType\tExample#d\tThe day of the month\tNumber\t1 #DD\tShortened day of the month\tString\tMon #DDD\tFull day of the month\tString\tMonday #mm\tThe month of the year\tNumber\t1 #MM\tShortened month of the year\tString\tJan #MMM\tFull month of the year\tString\tJanuary #y\tThe year\tNumber\t2021 #h\tThe hour of the day (12 hour)\tNumber\t1 #hh\tThe hour of the day (24 hour)\tNumber\t13 #m\tThe minute of the hour\tNumber\t1 #s\tThe second of the minute\tNumber\t1 #a\tThe AM/PM of the time\tString\tAM "},{"title":"RoTime","type":0,"sectionRef":"#","url":"/RoTime/api/RoTime","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#functions","content":" "},{"title":"add​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#add","content":"Chainable &lt;/&gt; RoTime:add( amount: number, type: string ) → RoTime Adds a certain amount of time to the current time.  "},{"title":"createTimer​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#createTimer","content":"&lt;/&gt; RoTime:createTimer( waitForAmount: number, incrementType: string, step: number | nil, startAt: number | nil ) → Timer "},{"title":"Types","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime##","content":""},{"title":"​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#Timer","content":"interface Timer { OnUpdate: RBXScriptSignal OnCompletion: RBXScriptSignal Start: (self: Timer) → nil Pause: (self: Timer) → nil Resume: (self: Timer) → nil Cancel: (self: Timer) → nil }  Creates a timer that can be used to track the amount of time until a certain time. -- This timer will update every 5 seconds, will start at 1 minute and last for 1 hour. local myTimer = RoTime:createTimer(1, &quot;hour&quot;, 5, 60) myTimer.OnUpdate:Connect(function(elapsedTime: number) print(&quot;Timer updated! Elapsed time: &quot; .. elapsedTime) end) myTimer.OnCompletion:Connect(function() print(&quot;Timer completed!&quot;) end) myTimer:Start() danger At this moment, Signal is not being used! Please remember to disconnect any connections you make!  "},{"title":"day​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#day","content":"Chainable &lt;/&gt; RoTime:day(newDay: number) → RoTime Sets the day of the month to a new value.  "},{"title":"format​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#format","content":"&lt;/&gt; RoTime:format(code: string | nil) → string Formats a string of code into a string of time. RoTime:format(&quot;#h:#m:#s&quot;) RoTime:format() -- Uses the global format You can find the formatting patterns here.  "},{"title":"get​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#get","content":"&lt;/&gt; RoTime:get(type: string) → number Gets a specific value from the current time's date.  "},{"title":"getCalender​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#getCalender","content":"&lt;/&gt; RoTime:getCalender( month: number | nil, year: number | nil ) → {calenderData} "},{"title":"Types","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime##","content":""},{"title":"​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#calenderData","content":"interface calenderData { dayName: string dayNumber: number }   info This method is currently unavailable and usage will result in defaulting back to the RoTime class.  "},{"title":"getDate​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#getDate","content":"&lt;/&gt; RoTime:getDate() → string Gets the date in format of MM/DD/YYYY  "},{"title":"getTime​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#getTime","content":"&lt;/&gt; RoTime:getTime() → string Gets the date in format of HH:MM:SS AM/PM  "},{"title":"isLeapYear​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#isLeapYear","content":"&lt;/&gt; RoTime:isLeapYear(year: number | nil) → boolean Checks if a year is a leap year. If year is not provided it will default to the current year. RoTime:isLeapYear(2020) -- true RoTime:isLeapYear() -- false   "},{"title":"month​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#month","content":"Chainable &lt;/&gt; RoTime:month(newMonth: number) → RoTime Sets the current month to a new value.  "},{"title":"set​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#set","content":"Chainable Uses Global Format unreleased &lt;/&gt; RoTime:set( toSetTo: string, ignoreWarnings: boolean | nil ) → RoTime Sets the current time to a new date. RoTime:setGlobalFormat(&quot;#h:#m:#s #a&quot;) RoTime:set(&quot;1:35:30 PM&quot;) info This method is currently unavailable and usage will result in defaulting back to the RoTime class.  "},{"title":"setGlobalFormat​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#setGlobalFormat","content":"Chainable Optional &lt;/&gt; RoTime:setGlobalFormat(newGlobalFormat: string) → RoTime Sets the global format for all RoTime instances.  "},{"title":"subtract​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#subtract","content":"Chainable &lt;/&gt; RoTime:subtract( amount: number, type: string ) → () Subtracts a certain amount of time from the current time. return RoTime  "},{"title":"timezone​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#timezone","content":"Chainable &lt;/&gt; RoTime:timezone(zone: string) → RoTime Sets the current class's timezone to the one specified.  "},{"title":"addTimezone​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#addTimezone","content":"Chainable &lt;/&gt; RoTime:addTimezone( zoneName: string, zoneOffset: number ) → RoTime Adds a new timezone defined by the developer. RoTime:addTimezone(&quot;Texas&quot;, -6)   "},{"title":"removeTimezone​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#removeTimezone","content":"Chainable &lt;/&gt; RoTime:removeTimezone(zoneName: string) → RoTime Removes a timezone.  "},{"title":"getTimezone​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#getTimezone","content":"&lt;/&gt; RoTime:getTimezone() → string Gets the current timezone's name.  "},{"title":"toNow​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#toNow","content":"Chainable &lt;/&gt; RoTime:toNow(date: string) → RoTime Provides the use case to get the amount of time until a certain date. info This method is currently unavailable and usage will result in defaulting back to the RoTime class.  "},{"title":"Unix​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#Unix","content":"&lt;/&gt; RoTime:Unix() → number Gets the current Unix timestamp.  "},{"title":"UnixMillis​","type":1,"pageTitle":"RoTime","url":"/RoTime/api/RoTime#UnixMillis","content":"&lt;/&gt; RoTime:UnixMillis() → number Gets the current Unix timestamp with milliseconds. "}]