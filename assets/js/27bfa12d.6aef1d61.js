"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[297],{15828:e=>{e.exports=JSON.parse('{"functions":[{"name":"add","desc":"Adds a certain amount of time to the current time.","params":[{"name":"amount","desc":"","lua_type":"number"},{"name":"type","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"RoTime"}],"function_type":"method","tags":["Chainable"],"source":{"line":15,"path":"src/modules/add.lua"}},{"name":"createTimer","desc":"Creates a timer that can be used to track the amount of time until a certain time.\\n\\n```lua\\n-- This timer will update every 5 seconds, will start at 1 minute and last for 1 hour.\\nlocal myTimer = RoTime:createTimer(1, \\"hour\\", 5, 60)\\n\\nmyTimer.OnUpdate:Connect(function(elapsedTime: number)\\n\\tprint(\\"Timer updated! Elapsed time: \\" .. elapsedTime)\\nend)\\n\\nmyTimer.OnCompletion:Connect(function()\\n\\tprint(\\"Timer completed!\\")\\nend)\\n\\nmyTimer:Start()\\n```\\n\\n\\n\\n:::danger\\nAt this moment, [**Signal**](https://sleitnick.github.io/RbxUtil/api/Signal/) is not being used! Please remember to disconnect any connections you make!\\n:::","params":[{"name":"waitForAmount","desc":"","lua_type":"number"},{"name":"incrementType","desc":"","lua_type":"string"},{"name":"step","desc":"","lua_type":"number | nil"},{"name":"startAt","desc":"","lua_type":"number | nil"}],"returns":[{"desc":"","lua_type":"Timer"}],"function_type":"method","source":{"line":59,"path":"src/modules/createTimer.lua"}},{"name":"day","desc":"Sets the day of the month to a new value.","params":[{"name":"newDay","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"RoTime"}],"function_type":"method","tags":["Chainable"],"source":{"line":14,"path":"src/modules/day.lua"}},{"name":"format","desc":"Formats a string of code into a string of time.\\n\\n```lua\\nRoTime:format(\\"#h:#m:#s\\")\\nRoTime:format() -- Uses the global format\\n```\\n\\nYou can find the formatting patterns [here](/RoTime/docs/Patterns).","params":[{"name":"code","desc":"","lua_type":"string | nil"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":63,"path":"src/modules/format.lua"}},{"name":"get","desc":"Gets a specific value from the current time\'s date.","params":[{"name":"type","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":13,"path":"src/modules/get.lua"}},{"name":"getCalender","desc":":::info\\nThis method is currently unavailable and usage will result in defaulting back to the `RoTime` class.\\n:::","params":[{"name":"month","desc":"","lua_type":"number | nil"},{"name":"year","desc":"","lua_type":"number | nil"}],"returns":[{"desc":"","lua_type":"{calenderData}"}],"function_type":"method","source":{"line":23,"path":"src/modules/getCalender.lua"}},{"name":"getDate","desc":"Gets the date in format of `MM/DD/YYYY`","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":11,"path":"src/modules/getDate.lua"}},{"name":"getTime","desc":"Gets the date in format of `HH:MM:SS AM/PM`","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":11,"path":"src/modules/getTime.lua"}},{"name":"isLeapYear","desc":"Checks if a year is a leap year. If `year` is not provided it will default to the current year.\\n\\n```lua\\nRoTime:isLeapYear(2020) -- true\\nRoTime:isLeapYear() -- false\\n```","params":[{"name":"year","desc":"","lua_type":"number | nil"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":18,"path":"src/modules/isLeapYear.lua"}},{"name":"month","desc":"Sets the current month to a new value.","params":[{"name":"newMonth","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"RoTime"}],"function_type":"method","tags":["Chainable"],"source":{"line":12,"path":"src/modules/month.lua"}},{"name":"set","desc":"Sets the current time to a new date.\\n\\n```lua\\nRoTime:setGlobalFormat(\\"#h:#m:#s #a\\")\\nRoTime:set(\\"1:35:30 PM\\")\\n```\\n\\n\\n\\n\\n:::info\\nThis method is currently unavailable and usage will result in defaulting back to the `RoTime` class.\\n:::","params":[{"name":"toSetTo","desc":"","lua_type":"string"},{"name":"ignoreWarnings","desc":"","lua_type":"boolean | nil"}],"returns":[{"desc":"","lua_type":"RoTime"}],"function_type":"method","tags":["Chainable","Uses Global Format"],"unreleased":true,"source":{"line":28,"path":"src/modules/set.lua"}},{"name":"setGlobalFormat","desc":"Sets the global format for all RoTime instances.","params":[{"name":"newGlobalFormat","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"RoTime"}],"function_type":"method","tags":["Chainable","Optional"],"source":{"line":15,"path":"src/modules/setGlobalFormat.lua"}},{"name":"subtract","desc":"Subtracts a certain amount of time from the current time.\\n\\n\\n\\nreturn RoTime","params":[{"name":"amount","desc":"","lua_type":"number"},{"name":"type","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","tags":["Chainable"],"source":{"line":15,"path":"src/modules/subtract.lua"}},{"name":"timezone","desc":"Sets the current class\'s timezone to the one specified.","params":[{"name":"zone","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"RoTime"}],"function_type":"method","tags":["Chainable"],"source":{"line":48,"path":"src/modules/timezone.lua"}},{"name":"addTimezone","desc":"Adds a new timezone defined by the developer.\\n\\n```lua\\nRoTime:addTimezone(\\"Texas\\", -6)\\n```","params":[{"name":"zoneName","desc":"","lua_type":"string"},{"name":"zoneOffset","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"RoTime"}],"function_type":"method","tags":["Chainable"],"source":{"line":65,"path":"src/modules/timezone.lua"}},{"name":"removeTimezone","desc":"Removes a timezone.","params":[{"name":"zoneName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"RoTime"}],"function_type":"method","tags":["Chainable"],"source":{"line":77,"path":"src/modules/timezone.lua"}},{"name":"getTimezone","desc":"Gets the current timezone\'s name.","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":86,"path":"src/modules/timezone.lua"}},{"name":"toNow","desc":"Provides the use case to get the amount of time until a certain date.\\t\\n\\n\\n\\n:::info\\nThis method is currently unavailable and usage will result in defaulting back to the `RoTime` class.\\n:::","params":[{"name":"date","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"RoTime"}],"function_type":"method","tags":["Chainable"],"source":{"line":20,"path":"src/modules/toNow.lua"}},{"name":"Unix","desc":"Gets the current Unix timestamp.","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":11,"path":"src/modules/Unix.lua"}},{"name":"UnixMillis","desc":"Gets the current Unix timestamp with milliseconds.","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":13,"path":"src/modules/UnixMillis.lua"}},{"name":"_parser","desc":"The main parser for converting formatting strings into usable tokens.","params":[{"name":"date","desc":"","lua_type":"string"},{"name":"shouldReturnUnknownCharacters","desc":"","lua_type":"boolean | nil"}],"returns":[{"desc":"","lua_type":"Parsed"}],"function_type":"method","private":true,"source":{"line":25,"path":"src/modules/_parser.lua"}}],"properties":[{"name":"_now","desc":"\\t","lua_type":"number","private":true,"readonly":true,"source":{"line":57,"path":"src/init.lua"}},{"name":"_nowdt","desc":"\\t","lua_type":"DateTime","private":true,"readonly":true,"source":{"line":65,"path":"src/init.lua"}},{"name":"_timezone","desc":"\\t","lua_type":"string","private":true,"readonly":true,"source":{"line":73,"path":"src/init.lua"}},{"name":"_globalFormat","desc":"\\t","lua_type":"string","private":true,"readonly":true,"source":{"line":81,"path":"src/init.lua"}}],"types":[{"name":"Timer","desc":"","fields":[{"name":"OnUpdate","lua_type":"RBXScriptSignal","desc":""},{"name":"OnCompletion","lua_type":"RBXScriptSignal","desc":""},{"name":"Start","lua_type":"(self: Timer) -> nil","desc":""},{"name":"Pause","lua_type":"(self: Timer) -> nil","desc":""},{"name":"Resume","lua_type":"(self: Timer) -> nil","desc":""},{"name":"Cancel","lua_type":"(self: Timer) -> nil","desc":""}],"source":{"line":27,"path":"src/modules/createTimer.lua"}},{"name":"calenderData","desc":"","fields":[{"name":"dayName","lua_type":"string","desc":""},{"name":"dayNumber","lua_type":"number","desc":""}],"source":{"line":9,"path":"src/modules/getCalender.lua"}},{"name":"Parsed","desc":"","fields":[{"name":"code","lua_type":"string","desc":""},{"name":"startIndex","lua_type":"number","desc":""},{"name":"endIndex","lua_type":"number","desc":""}],"private":true,"source":{"line":12,"path":"src/modules/_parser.lua"}}],"name":"RoTime","desc":"","source":{"line":9,"path":"src/init.lua"}}')}}]);